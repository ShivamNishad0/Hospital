"""All Tables Created

Revision ID: e09dc1acf911
Revises: 
Create Date: 2025-08-29 23:27:45.921209

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e09dc1acf911'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'OTHERS', name='genderenum'), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('phone_number', sa.String(length=10), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'DOCTOR', 'PATIENT', name='roleenum'), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('phone_number')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=False)
    op.create_table('doctors',
    sa.Column('doc_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('specialization', sa.String(length=100), nullable=False),
    sa.Column('qualification', sa.String(length=100), nullable=False),
    sa.Column('experience', sa.String(length=50), nullable=True),
    sa.Column('bio', sa.String(length=255), nullable=True),
    sa.Column('available_days', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('doc_id')
    )
    op.create_index(op.f('ix_doctors_doc_id'), 'doctors', ['doc_id'], unique=False)
    op.create_table('patients',
    sa.Column('patient_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('patient_id')
    )
    op.create_index(op.f('ix_patients_patient_id'), 'patients', ['patient_id'], unique=False)
    op.create_table('appointments',
    sa.Column('appointment_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('patient_id', sa.BigInteger(), nullable=False),
    sa.Column('doctor_id', sa.BigInteger(), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('disease', sa.String(length=1000), nullable=True),
    sa.Column('status', sa.Enum('booked', 'confirmed', 'completed', 'cancelled', name='appointmentstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('end_time > start_time', name='check_time_range'),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.doc_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.patient_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('appointment_id'),
    sa.UniqueConstraint('doctor_id', 'start_time', 'end_time', name='uq_doc_timeslot')
    )
    op.create_table('doctor_availability',
    sa.Column('availability_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('doctor_id', sa.BigInteger(), nullable=False),
    sa.Column('day_of_week', sa.SmallInteger(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('end_time > start_time', name='check_available_range'),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.doc_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('availability_id')
    )
    op.create_table('medical_allergies',
    sa.Column('allergy_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('doctor_id', sa.Integer(), nullable=False),
    sa.Column('substance', sa.String(), nullable=False),
    sa.Column('reaction', sa.String(), nullable=True),
    sa.Column('severity', sa.Enum('mild', 'moderate', 'severe', name='allergyseverityenum'), nullable=True),
    sa.Column('status', sa.Enum('active', 'inactive', name='allergystatusenum'), nullable=True),
    sa.Column('recorded_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.doc_id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.patient_id'], ),
    sa.PrimaryKeyConstraint('allergy_id')
    )
    op.create_index(op.f('ix_medical_allergies_allergy_id'), 'medical_allergies', ['allergy_id'], unique=False)
    op.create_index(op.f('ix_medical_allergies_doctor_id'), 'medical_allergies', ['doctor_id'], unique=False)
    op.create_index(op.f('ix_medical_allergies_patient_id'), 'medical_allergies', ['patient_id'], unique=False)
    op.create_table('lab_orders',
    sa.Column('lab_order_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('appointment_id', sa.Integer(), nullable=False),
    sa.Column('test_name', sa.String(), nullable=False),
    sa.Column('notes', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('ORDERED', 'SAMPLE_COLLECTED', 'COMPLETED', name='laborderstatusenum'), nullable=True),
    sa.Column('result_file_path', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['appointment_id'], ['appointments.appointment_id'], ),
    sa.PrimaryKeyConstraint('lab_order_id')
    )
    op.create_index(op.f('ix_lab_orders_lab_order_id'), 'lab_orders', ['lab_order_id'], unique=False)
    op.create_table('prescription',
    sa.Column('presc_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('appointment_id', sa.Integer(), nullable=False),
    sa.Column('doctor_id', sa.Integer(), nullable=False),
    sa.Column('patient_id', sa.Integer(), nullable=False),
    sa.Column('medicines', sa.Text(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['appointment_id'], ['appointments.appointment_id'], ),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.doc_id'], ),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.patient_id'], ),
    sa.PrimaryKeyConstraint('presc_id')
    )
    op.create_index(op.f('ix_prescription_presc_id'), 'prescription', ['presc_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_prescription_presc_id'), table_name='prescription')
    op.drop_table('prescription')
    op.drop_index(op.f('ix_lab_orders_lab_order_id'), table_name='lab_orders')
    op.drop_table('lab_orders')
    op.drop_index(op.f('ix_medical_allergies_patient_id'), table_name='medical_allergies')
    op.drop_index(op.f('ix_medical_allergies_doctor_id'), table_name='medical_allergies')
    op.drop_index(op.f('ix_medical_allergies_allergy_id'), table_name='medical_allergies')
    op.drop_table('medical_allergies')
    op.drop_table('doctor_availability')
    op.drop_table('appointments')
    op.drop_index(op.f('ix_patients_patient_id'), table_name='patients')
    op.drop_table('patients')
    op.drop_index(op.f('ix_doctors_doc_id'), table_name='doctors')
    op.drop_table('doctors')
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
